# vim: ft=bash:
# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi
DEBIAN_CHROOT="${debian_chroot:+($debian_chroot)}"

# check if I'm connected via SSH
[ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ] || [ -f /.dockerenv ] && HOSTINFO='\u@\h:'


# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    screen|xterm-color|*-256color) color_prompt=yes; export COLORTERM=truecolor;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

# git branch information for prompt
COLOR_RED="\001\033[1;31m\002"
COLOR_YELLOW="\001\033[0;33m\002"
COLOR_GREEN="\001\033[0;32m\002"
COLOR_OCHRE="\001\033[38;5;95m\002"
COLOR_BLUE="\001\033[0;34m\002"
BOLD_BLUE="\001\033[01;34m\002"
COLOR_WHITE="\001\033[0;37m\002"
COLOR_RESET="\001\033[0m\002"

if [ $color_prompt ]; then
    CWD="$BOLD_BLUE\w$COLOR_RESET"
else
    CWD='\w'
fi

git_status_quick() {
    GIT_BRANCH="$(git rev-parse --abbrev-ref HEAD 2> /dev/null)"
    if [ $? -ne 0 ]; then
        GIT_COLORED=
        GIT_NOCOLOR=
    else
        GIT_COLORED=" (${COLOR_BLUE}${GIT_BRANCH}${COLOR_RESET})"
        GIT_NOCOLOR=" (${GIT_BRANCH})"
    fi
}

git_status() {
    local git_status="$(LC_ALL=C git status 2> /dev/null)"
    [ "$git_status" = "" ] && GIT_COLORED= && GIT_NOCOLOR= && return
    local on_branch="On branch ([^${IFS}]*)"
    local on_commit="HEAD detached at ([^${IFS}]*)"

    GIT_BRANCH=
    if [[ $git_status =~ $on_branch ]]; then
        local branch="${BASH_REMATCH[1]}"
        GIT_BRANCH="$branch"
    elif [[ $git_status =~ $on_commit ]]; then
        local commit="${BASH_REMATCH[1]}"
        GIT_BRANCH="$commit"
    else
        local info="$(echo "$git_status" | head -n 1)"
        GIT_BRANCH="$info"
    fi
    # GIT_BRANCH=" (master)"

    GIT_COLOR=
    if [[ $git_status =~ "Changes not staged for commit" ]]; then
        GIT_COLOR="$COLOR_RED"
    elif [[ $git_status =~ "Your branch is ahead of" ]]; then
        GIT_COLOR="$COLOR_YELLOW"
    elif [[ $git_status =~ "nothing added to commit but untracked files present" ]]; then
        GIT_COLOR="$COLOR_GREEN"
    elif [[ $git_status =~ "nothing to commit" ]]; then
        GIT_COLOR="$COLOR_GREEN"
    else
        GIT_COLOR="$COLOR_OCHRE"
    fi

    local modified=$(git ls-files --modified $(git rev-parse --show-cdup) | wc -l)
    local untracked=$(git ls-files --others --exclude-standard $(git rev-parse --show-cdup) | wc -l)
    local remote_tracking=$(git rev-parse --abbrev-ref --symbolic-full-name '@{u}' 2> /dev/null)
    local behind=$(git rev-list --left-only --count $remote_tracking...@)
    local ahead=$(git rev-list --right-only --count $remote_tracking...@)

    local git_info=""
    [ "$behind"   -gt 0 ] && git_info+='↓'$behind
    [ "$ahead"    -gt 0 ] && git_info+='↑'$ahead
    [ "$modified" -gt 0 ] || [ "$untracked" -gt 0 ] && git_info+='|'
    [ "$modified" -gt 0 ] && git_info+='+'$modified
    [ "$untracked" -gt 0 ] && git_info+='…'$untracked
    # too slow!
    # execution time in seconds:
    # 0.014878350    ++++ local ahead=0
    # 0.017724254    ++++ local behind=18
    # 0.204176192    ++++ local modified=0
    # 0.328666759    ++++ local untracked=19
    # 0.521914460    ++++ local 'git_status=On branch main

    GIT_COLORED=" (${GIT_COLOR}${GIT_BRANCH}${COLOR_RESET}${git_info})"
    GIT_NOCOLOR=" (${GIT_BRANCH}${git_info})"
}

cmd_status() {
    if [ $? = "0" ]; then
        if [ "$color_prompt" = yes ]; then
            STATUS="${COLOR_GREEN}✔${COLOR_RESET} "
        else
            STATUS="✔ "
        fi
    else
        if [ "$color_prompt" = yes ]; then
            STATUS="${COLOR_RED}✘${COLOR_RESET} "
        else
            STATUS="✘ "
        fi
    fi
}

prompt_command() {
    cmd_status
    # git_status
    git_status_quick
    if [ -f /.dockerenv ]; then
        KRB_STATUS_MSG=""
    else
        type __prompt_command > /dev/null 2>&1 && __prompt_command
    fi
    # breaks when the prompt is so long that it wraps but only with color prompt and
    # inside git directories (even when GIT_COLOR and COLOR_RESET in omitted)!
    # (breaks only when prompt is wrapped twice or wrapped inside cwd!?)
    if [ "$color_prompt" = yes ]; then
        PS1="\n${STATUS}${KRB_STATUS_MSG}${HOSTINFO}${DEBIAN_CHROOT}${CWD}${GIT_COLORED}\n${COLOR_BLUE}\$${COLOR_RESET} "
    else
        PS1="\n${STATUS}${KRB_STATUS_MSG}${HOSTINFO}${DEBIAN_CHROOT}${CWD}${GIT_NOCOLOR}\n\$ "
    fi
}

# Static prompt as fallback for cases when COLOR_PROMPT is overwritten after this file
prompt_command
PS1="${HOSTINFO}${DEBIAN_CHROOT}${CWD} \$ "

# If this is an xterm set the title to user@host:dir
case "$TERM" in
    xterm*|rxvt*)
        PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
        ;;
    *)
        ;;
esac

PROMPT_COMMAND=prompt_command
