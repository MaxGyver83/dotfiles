#!/bin/sh

usage() {
    echo "Usage:
wiki new [FILENAME]
wiki list
wiki [i]find FILENAME_PART
wiki [i]grep PATTERN ...
wiki FILENAME_PART|PATTERN

new: Pass FILENAME without path and file extension.
ifind/igrep: Interactive search using fzf.

Key bindings in FZF:

- Enter: Open in Neovim.
- Ctrl-f: Print filename.
- Ctrl-b: Open in bat.
- Ctrl-l: Open selected line in bat.
- Ctrl-r: Open in rich.
- Ctrl-h: Convert to HTML and open in browser.
"
}

[ ! $WIKI_DIR ] && echo 'Set/export $WIKI_DIR before running this script!' && exit 1
[ ! -d "$WIKI_DIR" ] && echo "Can't find directory '$WIKI_DIR'!" && exit 1

new() {
    if [ "$1" ]; then
        name="$*"
    else
        read -p "Title: " name
        # remove trailing newline
        name="${name%
}"
    fi
    echo "Name: $name"
    mdfile="$WIKI_DIR/$name.md"

    now="$(date -u '+%Y%m%d%H%M%S%3N')"
    echo -n "\
created: $now
modified: $now
tags:
title: $name
type: text/x-markdown" > "$mdfile".meta

    touch "$mdfile" && nvim "$mdfile"
}

fzffind() {
    default='enter:become(nvim {})'
    filename="ctrl-f:become(echo '$WIKI_DIR'/{})"
    bat='ctrl-b:become(bat --style=plain,header-filename -l md {})'
    rich='ctrl-r:become(python -m rich.markdown -c {} |& less -R)'
    html='ctrl-h:become(open-in-browser {})'

    preview='bat -l=md --style=numbers --color=always {1}'

    fd -etid -emd "$*" | sed 's|^\./||' \
        | fzf -d ':' --exit-0 --bind "$default,$bat,$rich,$filename,$html" \
          --preview-window 'down:40%:+{2}' \
          --preview "$preview"
}

setsharedvars() {
    default='enter:become(open-in-nvim {})'
    filename="ctrl-f:become[echo {} | cut -d: -f1 | (echo -n '$WIKI_DIR'/ && cat)]"
    line='ctrl-l:become(open-in-bat {} single-line)'
    bat='ctrl-b:become(open-in-bat {})'
    rich='ctrl-r:become(open-in-rich {})'
    html='ctrl-h:become(open-in-browser {})'
    # Alternative to external open-in-browser script (and open-in-*):
    # Use bash; define and export open-in-browser function.

    preview='bat -l=md --style=numbers --color=always --highlight-line {2} {1}'
}

fzfgrep() {
    setsharedvars
    rg --line-number --no-heading --color=always --smart-case \
          --glob '*.{tid,md}' "${@}" \
        | fzf -d ':' --ansi --no-sort --exit-0 \
          --bind "$default,$bat,$rich,$filename,$line,$html" \
          --preview-window 'down:40%:+{2}' \
          --preview "$preview"
}

fzfcombined() {
    setsharedvars
    or_regex="$(echo $* | tr ' ' '|')"
    and_regex=""
    for part in "$@"; do and_regex="${and_regex}(?=.*$part)"; done
    (fd -etid -emd . | rg --pcre2 "$and_regex" | sed 's|^\./||' | sed 's/$/:1/' ;\
     rg --line-number --no-heading --color=always --smart-case \
          --glob '*.{tid,md}' "$or_regex") \
        | fzf -d ':' --ansi --no-sort --exit-0 \
          --bind "$default,$bat,$rich,$filename,$line,$html" \
          --preview-window 'down:40%:+{2}' \
          --preview "$preview"
}

case "$1" in
""|-h|--help) usage ;;
new) shift; new "$@" ;;
list) cd "$WIKI_DIR" && fd -etid -emd ;;
find) shift; cd "$WIKI_DIR" && fd -etid -emd "$*" ;;
ifind) shift; cd "$WIKI_DIR" && fzffind "$@" ;;
grep) shift; cd "$WIKI_DIR" && rg -g '*.{tid,md}' "$@" ;;
igrep) shift; cd "$WIKI_DIR" && fzfgrep "$@" ;;
*) cd "$WIKI_DIR" && fzfcombined "$@" ;;
esac
